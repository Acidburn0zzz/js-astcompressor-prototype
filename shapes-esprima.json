{
  "shapeKey": "type",
  "shapes": {
    "Program": {
      "body": "BlockStatement"
    },
    "Function": {
      "id": "Identifier?",
      "params": [ "Pattern" ],
      "defaults": [ "Expression" ],
      "rest": "Identifier?",
      "body": "BlockStatement | Expression"
    },
    "EmptyStatement": {
    },
    "BlockStatement": {
      "body": [ "Statement" ]
    },
    "ExpressionStatement": {
      "expression": "Expression"
    },
    "IfStatement": {
      "test": "Expression",
      "consequent": "Statement",
      "alternate": "Statement?"
    },
    "LabeledStatement": {
      "label": "Identifier",
      "body": "Statement"
    },
    "BreakStatement": {
      "label": "Identifier?"
    },
    "ContinueStatement": {
      "label": "Identifier?"
    },
    "SwitchStatement": {
      "discriminant": "Expression",
      "cases": [ "SwitchCase" ],
      "lexical": "Boolean"
    },
    "ReturnStatement": {
      "argument": "Expression?"
    },
    "ThrowStatement": {
      "argument": "Expression"
    },
    "TryStatement": {
      "block": "BlockStatement",
      "handler": "CatchClause?",
      "guardedHandlers": [ "CatchClause" ],
      "finalizer": "BlockStatement?"
    },
    "WhileStatement": {
      "body": "Statement",
      "test": "Expression"
    },
    "DoWhileStatement": {
      "body": "Statement",
      "test": "Expression"
    },
    "ForStatement": {
      "init": "VariableDeclaration | Expression | null",
      "test": "Expression?",
      "update": "Expression?",
      "body": "Statement"
    },
    "ForInStatement": {
      "left": "VariableDeclaration | Expression",
      "right": "Expression",
      "body": "Statement",
      "each": "Boolean"
    },
    "ForOfStatement": {
      "left": "VariableDeclaration | Expression",
      "right": "Expression",
      "body": "Statement"
    },
    "LetStatement": {
      "head": [ "VariableDeclarator" ],
      "body": "Statement"
    },
    "DebuggerStatement": {
    },
    "FunctionDeclaration": {
      "id": "Identifier",
      "params": [ "Pattern" ],
      "defaults": [ "Expression" ],
      "rest": "Identifier?",
      "body": "BlockStatement | Expression"
    },
    "VariableDeclaration": {
      "declarations": [ "VariableDeclarator" ],
      "kind": "String"
    },
    "VariableDeclarator": {
      "id": "Pattern",
      "init": "Expression?"
    },
    "ThisExpression": {
    },
    "ArrayExpression": {
      "elements": [ "Expression?" ]
    },
    "ObjectExpression": {
      "properties": [ "Property" ]
    },
    "Property": {
      "key": "Literal | Identifier",
      "value": "Expression",
      "kind": "String"
    },
    "FunctionExpression": {
      "id": "Identifier?",
      "params": [ "Pattern" ],
      "defaults": [ "Expression" ],
      "rest": "Identifier?",
      "body": "BlockStatement | Expression"
    },
    "ArrowExpression": {
      "id": "Identifier?",
      "params": [ "Pattern" ],
      "defaults": [ "Expression" ],
      "rest": "Identifier?",
      "body": "BlockStatement | Expression"
    },
    "SequenceExpression": {
      "expressions": [ "Expression" ]
    },
    "UnaryExpression": {
      "operator": "UnaryOperator",
      "prefix": "Boolean",
      "argument": "Expression"
    },
    "BinaryExpression": {
      "operator": "BinaryOperator",
      "left": "Expression",
      "right": "Expression"
    },
    "AssignmentExpression": {
      "operator": "AssignmentOperator",
      "left": "Pattern",
      "right": "Expression"
    },
    "UpdateExpression": {
      "operator": "UpdateOperator",
      "argument": "Expression",
      "prefix": "Boolean"
    },
    "LogicalExpression": {
      "operator": "LogicalOperator",
      "left": "Expression",
      "right": "Expression"
    },
    "ConditionalExpression": {
      "test": "Expression",
      "alternate": "Expression",
      "consequent": "Expression"
    },
    "NewExpression": {
      "callee": "Expression",
      "arguments": [ "Expression" ]
    },
    "CallExpression": {
      "callee": "Expression",
      "arguments": [ "Expression" ]
    },
    "MemberExpression": {
      "object": "Expression",
      "property": "Identifier | Expression",
      "computed": "Boolean"
    },
    "LetExpression": {
      "head": [ "VariableDeclarator" ],
      "body": "Expression"
    },
    "SwitchCase": {
      "test": "Expression?",
      "consequent": [ "Statement" ]
    },
    "CatchClause": {
      "param": "Pattern",
      "guard": "Expression?",
      "body": "BlockStatement"
    },
    "Identifier": {
      "name": "String"
    },
    "Literal": {
      "value": "String | Boolean | null | Number | RegExp"
    }
  }
}