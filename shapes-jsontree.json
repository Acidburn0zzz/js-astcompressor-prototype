{
  "shapeKey": "type",
  "shapes": {
    "MemberAccess": {
      "lhs": "Expression",
      "memberName": "string"
    },
    "ComputedMemberAccess": {
      "lhs": "Expression",
      "rhs": "Expression"
    },
    "Identifier": {
      "identifier": "string"
    },
    "RegExpLiteral": {
      "pattern": "string",
      "flags": "string"
    },
    "BooleanLiteral": {
      "value": "boolean"
    },
    "StringLiteral": {
      "value": "string"
    },
    "IntegerLiteral": {
      "value": "integer"
    },
    "DoubleLiteral": {
      "value": "double"
    },
    "ObjectLiteral": {
      "pairs": ["Pair"]
    },
    "ArrayLiteral": {
      "elements": ["Expression"]
    },
    "StringPair": {
      "key": "string",
      "value": "Expression"
    },
    "NumberPair": {
      "key": "double",
      "value": "Expression"
    },
    "UnaryOperator": {
      "operator": "string",
      "rhs": "Expression"
    },
    "NullStatement": {
    },
    "ExpressionStatement": {
      "expression": "Expression"
    },
    "BreakStatement": {
      "label": "string?"
    },
    "ContinueStatement": {
      "label": "string?"
    },
    "ReturnStatement": {
      "expression": "Expression?"
    },
    "ThrowStatement": {
      "expression": "Expression?"
    },
    "Comma": {
      "expressions": ["Expression"]
    },
    "LabelStatement": {
      "labels": ["string"],
      "labelled": "Statement"
    },
    "ForStatement": {
      "initialize": "Expression?",
      "update": "Expression?",
      "condition": "Expression?",
      "body": "Statement"
    },
    "WhileStatement": {
      "condition": "Expression",
      "body": "Statement"
    },
    "DoWhileStatement": {
      "condition": "Expression",
      "body": "Statement"
    },
    "TryStatement": {
      "body": "Block",
      "catchExpression": "Expression?",
      "catchBlock": "Block?",
      "finallyBlock": "Block?"
    },
    "ForInDeclaration": {
      "variableName": "string",
      "sequenceExpression": "Expression"
    },
    "ForInStatement": {
      "declaration": "ForInDeclaration",
      "body": "Statement"
    },
    "SwitchStatement": {
      "value": "Expression",
      "cases": ["SwitchCase"]
    },
    "SwitchCase": {
      "value": "Expression?",
      "body": "Block?"
    },
    "PostfixMutation": {
      "operator": "string",
      "lhs": "Expression"
    },
    "PrefixMutation": {
      "operator": "string",
      "rhs": "Expression"
    },
    "BinaryOperator": {
      "operator": "string",
      "lhs": "Expression",
      "rhs": "Expression"
    },
    "AssignmentOperator": {
      "operator": "string",
      "lhs": "Expression",
      "rhs": "Expression"
    },
    "TernaryOperator": {
      "condition": "Expression",
      "trueExpression": "Expression",
      "falseExpression": "Expression"
    },
    "DeclarationStatement": {
      "declarations": ["Declaration"]
    },
    "Declaration": {
      "name": "string",
      "initialValue": "Expression?"
    },
    "Invocation": {
      "callee": "Expression",
      "argumentValues": ["Expression"]
    },
    "Block": {
      "statements": ["Statement"]
    },
    "IfStatement": {
      "condition": "Expression",
      "trueStatement": "Statement",
      "falseStatement": "Statement?"
    },
    "BlockStatement": {
      "block": "Block"
    },
    "Function": {
      "name": "string?",
      "argumentNames": ["string"],
      "body": "Block"
    },
    "TopLevel": {
      "statements": ["Statement"]
    },

    "SignedTruncation": {
      "expression": "Expression"
    },
    "UnsignedTruncation": {
      "expression": "Expression"
    },
    "ToDouble": {
      "expression": "Expression"
    },
    "UseAsmStatement": {
    }
  }
}